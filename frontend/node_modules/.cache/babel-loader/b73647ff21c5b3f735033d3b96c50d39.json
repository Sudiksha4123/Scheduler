{"ast":null,"code":"import _classCallCheck from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nif (!window['Smart']) {\n  window['Smart'] = {\n    RenderMode: 'manual'\n  };\n} else {\n  window['Smart'].RenderMode = 'manual';\n}\nimport '../source/modules/smart.window';\nimport React from 'react';\nvar Smart = window.Smart;\n/**\r\n Window or Dialog displays the interactive custom confirmations, message boxes, alerts, warnings, errors, and modal dialogs.\r\n*/\nvar Window = /*#__PURE__*/function (_React$Component) {\n  _inherits(Window, _React$Component);\n  function Window(props) {\n    var _this;\n    _classCallCheck(this, Window);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Window).call(this, props));\n    _this.componentRef = React.createRef();\n    return _this;\n  }\n  // Gets the id of the React component.\n  _createClass(Window, [{\n    key: \"appendChild\",\n    /** Appends a tabitem to the end of the list of tab items inside element.\r\n    * @param {Node} node. A TabItem element that should be added to the rest of the items as the last item.\r\n    * @returns {Node}\r\n    */\n    value: function appendChild(node) {\n      var result = this.nativeElement.appendChild(node);\n      return result;\n    }\n    /** Sets the window to the top level so the user can interact with it.\r\n    */\n  }, {\n    key: \"bringToFront\",\n    value: function bringToFront() {\n      var _this2 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.bringToFront();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this2.nativeElement.bringToFront();\n        });\n      }\n    }\n    /** Clears the content of the Window.\r\n    */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this3 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.clear();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this3.nativeElement.clear();\n        });\n      }\n    }\n    /** Closes the window.\r\n    */\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this4 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.close();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this4.nativeElement.close();\n        });\n      }\n    }\n    /** Collapses the window.\r\n    * @returns {HTMLElement}\r\n    */\n  }, {\n    key: \"collapse\",\n    value: function collapse() {\n      var result = this.nativeElement.collapse();\n      return result;\n    }\n    /** Makes sure a tab item is visible by scrolling to it. Applicable only to TabsWindow.\r\n    * @param {number} index. The index of the tab to scroll to.\r\n    */\n  }, {\n    key: \"ensureVisible\",\n    value: function ensureVisible(index) {\n      var _this5 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.ensureVisible(index);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this5.nativeElement.ensureVisible(index);\n        });\n      }\n    }\n    /** Expands the window after being collapsed.\r\n    * @returns {any[]}\r\n    */\n  }, {\n    key: \"expand\",\n    value: function expand() {\n      var result = this.nativeElement.expand();\n      return result;\n    }\n    /** Inserts a new tab and an associated content section. Applicable only to TabsWindow.\r\n    * @param {number} index. The index to insert a new tab at.\r\n    * @param {any} details. An Object with the fields \"label\", \"labelSize\", \"content\" and \"group\".\r\n    */\n  }, {\n    key: \"insert\",\n    value: function insert(index, details) {\n      var _this6 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.insert(index, details);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this6.nativeElement.insert(index, details);\n        });\n      }\n    }\n    /** Inserts the specified \"smart-tab-item\" node before the reference \"smart-tab-item\" node. Applicable only to TabsWindow.\r\n    * @param {Node} newNode. The \"jqx-tab-item\" node to insert.\r\n    * @param {Node | null} referenceNode?. The \"jqx-tab-item\" node before which newNode is inserted.\r\n    * @returns {Node}\r\n    */\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(newNode, referenceNode) {\n      var result = this.nativeElement.insertBefore(newNode, referenceNode);\n      return result;\n    }\n    /** Moves the window to a new position\r\n    * @param {string | number} left. Left position. For example: '100px'.\r\n    * @param {string | number} top. Top position. For example: '100px'.\r\n    */\n  }, {\n    key: \"move\",\n    value: function move(left, top) {\n      var _this7 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.move(left, top);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this7.nativeElement.move(left, top);\n        });\n      }\n    }\n    /** Maximizes the window to fill the area.\r\n    */\n  }, {\n    key: \"maximize\",\n    value: function maximize() {\n      var _this8 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.maximize();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this8.nativeElement.maximize();\n        });\n      }\n    }\n    /** Minimizes the window.\r\n    */\n  }, {\n    key: \"minimize\",\n    value: function minimize() {\n      var _this9 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.minimize();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this9.nativeElement.minimize();\n        });\n      }\n    }\n    /** Opens the window\r\n    */\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this10 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.open();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this10.nativeElement.open();\n        });\n      }\n    }\n    /** Pins the window. Disables window dragging.\r\n    */\n  }, {\n    key: \"pin\",\n    value: function pin() {\n      var _this11 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.pin();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this11.nativeElement.pin();\n        });\n      }\n    }\n    /** Removes a tab and its associated content section. Applicable only to TabsWindow.\r\n    * @param {number} index. The index of the tab to remove.\r\n    */\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      var _this12 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.removeAt(index);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this12.nativeElement.removeAt(index);\n        });\n      }\n    }\n    /** Removes a child \"smart-tab-item\" node. Applicable only to TabsWindow.\r\n    * @param {Node} node. The \"jqx-tab-item\" node to remove.\r\n    * @returns {Node}\r\n    */\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(node) {\n      var result = this.nativeElement.removeChild(node);\n      return result;\n    }\n    /** Restores the window to it's previous size before maximization/minimization.\r\n    */\n  }, {\n    key: \"restore\",\n    value: function restore() {\n      var _this13 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.restore();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this13.nativeElement.restore();\n        });\n      }\n    }\n    /** Selects a tab.  Applicalbe only to TabsWindow elements.\r\n    * @param {number} index. The index of the tab to select.\r\n    */\n  }, {\n    key: \"select\",\n    value: function select(index) {\n      var _this14 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.select(index);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this14.nativeElement.select(index);\n        });\n      }\n    }\n    /** Unpins the window. Enables window dragging.\r\n    */\n  }, {\n    key: \"unpin\",\n    value: function unpin() {\n      var _this15 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.unpin();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this15.nativeElement.unpin();\n        });\n      }\n    }\n    /** Updates the header label.\r\n    * @param {string} label. The new label of the Header.\r\n    */\n  }, {\n    key: \"updateLabel\",\n    value: function updateLabel(label) {\n      var _this16 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.updateLabel(label);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this16.nativeElement.updateLabel(label);\n        });\n      }\n    }\n    /** Updates the content.\r\n    * @param {string | HTMLElement} content. The new content of the window.\r\n    */\n  }, {\n    key: \"updateContent\",\n    value: function updateContent(content) {\n      var _this17 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.updateContent(content);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this17.nativeElement.updateContent(content);\n        });\n      }\n    }\n    /** Updates a TAB in TAB Window and its associated content section.  Applies only to TabsWindow elements.\r\n    * @param {number} index. The index of the tab to update.\r\n    * @param {string} label. The new label of the tab. The value can be the id of an HTMLTemplateElement\r\n    * @param {string | HTMLElement} content. The new content of the tab.\r\n    */\n  }, {\n    key: \"update\",\n    value: function update(index, label, content) {\n      var _this18 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.update(index, label, content);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this18.nativeElement.update(index, label, content);\n        });\n      }\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop in props) {\n        if (_prop === 'class' || _prop === 'className') {\n          var classNames = props[_prop].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop] !== that.nativeElement[_prop]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop === 'hover' || _prop === 'active' || _prop === 'focus' || _prop === 'selected') {\n            that.nativeElement.setAttribute(_prop, '');\n          }\n          var normalizedProp = normalizeProp(_prop);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop, props[_prop]);\n          }\n          if (props[_prop] !== undefined) {\n            if (typeof props[_prop] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        Smart.Render();\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-window\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'Window' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Determines if 'Add New' Tab inside the Tabs element is visible. Applicable only to TabsWindow\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"addNewTab\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.addNewTab : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.addNewTab = value;\n      }\n    }\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation | string\r\n    */\n  }, {\n    key: \"animation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.animation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.animation = value;\n      }\n    }\n    /** Determines whether and how the value should be automatically capitalized as it is entered/edited by the user. Applicable only to MultilinePromptWindow.\r\n    *\tProperty type: WindowAutoCapitalize | string\r\n    */\n  }, {\n    key: \"autoCapitalize\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.autoCapitalize : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.autoCapitalize = value;\n      }\n    }\n    /** Determines whether element will auto expand when the input overflows vertically. Applicable only to MultilinePromptWindow.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"autoExpand\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.autoExpand : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.autoExpand = value;\n      }\n    }\n    /** Determines the label for the 'cancel' button inside the Prompt Window.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"cancelLabel\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.cancelLabel : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.cancelLabel = value;\n      }\n    }\n    /** Determines the label for the 'Complete' button insinde the Progress Window.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"completeLabel\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.completeLabel : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.completeLabel = value;\n      }\n    }\n    /** Determines the label for the 'Confirm' button insinde the Prompt Window.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"confirmLabel\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.confirmLabel : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.confirmLabel = value;\n      }\n    }\n    /** Determines if the window is collapsed or not. When collapsed the only the header of the window is visible.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"collapsed\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.collapsed : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.collapsed = value;\n      }\n    }\n    /** When a modal window is opened, thid property determines if clicking on the mask closes the window or not.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"closeOnMaskClick\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.closeOnMaskClick : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.closeOnMaskClick = value;\n      }\n    }\n    /** Determines the data source that will be loaded to the TabsWindow. Applicable only to TabsWindow.\r\n    *\tProperty type: {label: string, content: string}[]\r\n    */\n  }, {\n    key: \"dataSource\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dataSource : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dataSource = value;\n      }\n    }\n    /** Enables or disables the window.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /** Enables or disables the window snapping feature.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disableSnap\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disableSnap : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disableSnap = value;\n      }\n    }\n    /** By default the window is closing after the 'Escape' key is pressed. Set this property to true, if you want to disable that.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disableEscape\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disableEscape : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disableEscape = value;\n      }\n    }\n    /** By default the window is handling keyboard keys like 'Arrows', 'Escape', etc. Set this property to true, if you want to disable that.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disableKeyboard\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disableKeyboard : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disableKeyboard = value;\n      }\n    }\n    /** Determines how the characters are displayed inside the input. Applicable to Prompt Window.\r\n    *\tProperty type: WindowDisplayMode | string\r\n    */\n  }, {\n    key: \"displayMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.displayMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.displayMode = value;\n      }\n    }\n    /** Applicable to TabsWindow when docked inside a DockingLayout Custom Element.  Determines where the window(it's tab items as well) can be dropped inside the DockingLayout.  The property is an array that accepts multiple positions. Note: Positions with prefix 'layout-' are applied to the Tab item children of the TabsWidnow owner that is being dragged. The rest of the positions indicate the allowed drop position inside the hovered target(TabsWindow). Used only by jqxDockingLayout custom elements. Determines the possible drop position inside the DockingLayout. The following values are allowed.\r\n    *\tProperty type: WindowDropPosition | string\r\n    */\n  }, {\n    key: \"dropPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dropPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dropPosition = value;\n      }\n    }\n    /** A callback function defining the new format for the label of the Progress Bar. Applicable only to ProgressWindow.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"formatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.formatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.formatFunction = value;\n      }\n    }\n    /** Determines the position of the footer of the window element.\r\n    *\tProperty type: WindowFooterPosition | string\r\n    */\n  }, {\n    key: \"footerPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.footerPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.footerPosition = value;\n      }\n    }\n    /** Determines the template for the Dialog section of the window. By default footerTemplate is null.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"footerTemplate\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.footerTemplate : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.footerTemplate = value;\n      }\n    }\n    /** Set's the buttons that will be visible in the header section.\r\n    *\tProperty type: string[]\r\n    */\n  }, {\n    key: \"headerButtons\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.headerButtons : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.headerButtons = value;\n      }\n    }\n    /** Determines the template for the Dialog section of the window. By default headerTemplate is null.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"headerTemplate\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.headerTemplate : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.headerTemplate = value;\n      }\n    }\n    /** Determines the position of the header of the window element.\r\n    *\tProperty type: TabPosition | string\r\n    */\n  }, {\n    key: \"headerPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.headerPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.headerPosition = value;\n      }\n    }\n    /** Sets additional helper text below the text box. The hint is visible only when the text box is focued. Applicable to Prompt Window.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"hint\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.hint : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.hint = value;\n      }\n    }\n    /** Sets the value of the Progress bar to indeterminate state(null) and starts the animation. Applicable only to ProgressWindow.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"indeterminate\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.indeterminate : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.indeterminate = value;\n      }\n    }\n    /** Sets the filling direction of the Progress Bar. Applicable only to ProgressWindow.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"inverted\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.inverted : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.inverted = value;\n      }\n    }\n    /** The label of the window that appears in the header area.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"label\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.label : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.label = value;\n      }\n    }\n    /** When enabled the resizing operation happens live. By default it's not enabled and during resizing a highlighter around the edges of the window appears to outline  the current size of the element.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"liveResize\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.liveResize : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.liveResize = value;\n      }\n    }\n    /** Applicable only to TabsWindow when used with a DockingLayout custom element.Used only by jqxDockingLayout. Determines the owner jqxDockingLayout  that the window belongs to. When the tabsWindow has been removed from a DockingLayout element, the property is used to indicate that it belongs to that particular Dockinglayout. Accepts a string, representing the ID of a jqxDockingLayout on the page, or an instance of jqxDokcingLayout.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"layout\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.layout : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.layout = value;\n      }\n    }\n    /** Sets or gets the language. Used in conjunction with the property messages.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locale = value;\n      }\n    }\n    /** Applicable only to TabsWindow when docked inside a DockingLayout Custom Element.Determines of the item can be resized or not.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"locked\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locked : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locked = value;\n      }\n    }\n    /** Callback, related to localization module.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"localizeFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.localizeFormatFunction = value;\n      }\n    }\n    /** Determines if the window is maximized or not. When maximized the window covers the whole viewport.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"maximized\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.maximized : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.maximized = value;\n      }\n    }\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.messages : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.messages = value;\n      }\n    }\n    /** Determines if the window is modal or not. If true the user can only interact with the window and nothing else on the page.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"modal\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.modal : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.modal = value;\n      }\n    }\n    /** Applicable to TabsWindow when docked inside a DockingLayout Custom Element. Determines the max size of the item. Applicable to Progress Window by allowing the user to specify the maximum of the ProgressBar.\r\n    *\tProperty type: string | number | null\r\n    */\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.max : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.max = value;\n      }\n    }\n    /** Applicable to TabsWindow when docked inside DockingLayout Custom Element. Determines the min size of the item. Applicable to Progress Window by allowing the user to specify the minimu of the ProgressBar.\r\n    *\tProperty type: string | number | null\r\n    */\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.min : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.min = value;\n      }\n    }\n    /** Determines if the window is minimized or not. When minimized the window is docked at the bottom left corner of the viewport.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"minimized\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.minimized : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.minimized = value;\n      }\n    }\n    /** Sets or gets the maximum number of characters that the user can enter. Applicable to Prompt/MultilinePrompt Window.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"maxLength\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.maxLength : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.maxLength = value;\n      }\n    }\n    /** Sets or gets the minimum number of characters that the user have to enter to trigger the auto complete functionality. Applicable to Prompt/MultilinePrompt Window.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"minLength\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.minLength : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.minLength = value;\n      }\n    }\n    /** Determines if the window is visible or not.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"opened\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.opened : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.opened = value;\n      }\n    }\n    /** Determines if the window is pinned or not. Pinned window is a window that can't be dragged but can be resized.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"pinned\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.pinned : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.pinned = value;\n      }\n    }\n    /** Determines the input's placeholder. Applicable to Prompt Window.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.placeholder : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.placeholder = value;\n      }\n    }\n    /** Determines the label for the Input insinde the PromptWindow.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"promptLabel\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.promptLabel : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.promptLabel = value;\n      }\n    }\n    /** If the element is readonly, users cannot interact with it.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    }\n    /** When applied a resize indicator is displayed in the bottom right corner of the window and resizing operation can be initiated only from its position.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"resizeIndicator\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.resizeIndicator : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.resizeIndicator = value;\n      }\n    }\n    /** Determines the resizing mode of the window.  Several modes are available:   none - resizing is disabled.  vertical - vertical resizing is allowed.  horizontal - horizontal resizing is allowed. both - horizontal and vertical resizing is allowed. top - the window can only be resized from the top side. bottom - the window is resizable only from the bottom side. left - the window can be resized only from the left side. right - the window can be resized only from the right side.\r\n    *\tProperty type: WindowResizeMode | string\r\n    */\n  }, {\n    key: \"resizeMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.resizeMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.resizeMode = value;\n      }\n    }\n    /** Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"rightToLeft\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.rightToLeft : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.rightToLeft = value;\n      }\n    }\n    /** Specifies that the user must fill the input before submitting a form with the text box.Applicable to Prompt Window.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.required : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.required = value;\n      }\n    }\n    /** Specifies the message that will appear if required is set and no value is provided in the input. Applicable to Prompt Window.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"requiredMessage\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.requiredMessage : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.requiredMessage = value;\n      }\n    }\n    /** Determines whether the content of the input will be selected on focus or not. Applicable to Prompt Window.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"selectAllOnFocus\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectAllOnFocus : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectAllOnFocus = value;\n      }\n    }\n    /** Sets or gets which tab is selected. Applicable only to TabsWindow.\r\n    *\tProperty type: number | null\r\n    */\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectedIndex : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectedIndex = value;\n      }\n    }\n    /** Determines the way the user can switch between tabs. Applicable only to TabsWindow.\r\n    *\tProperty type: TabSelectionMode | string\r\n    */\n  }, {\n    key: \"selectionMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectionMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectionMode = value;\n      }\n    }\n    /** Indicates the index of the last character in the current selection. Applicable only to MultilinePromptWindow.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"selectionEnd\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectionEnd : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectionEnd = value;\n      }\n    }\n    /** Indicates the index to the first character in the current selection. Applicable only to MultilinePromptWindow.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"selectionStart\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectionStart : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectionStart = value;\n      }\n    }\n    /** Enables/Disabled the label for the Progress Bar. Applicable only to Progress Window.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"showProgressValue\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.showProgressValue : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.showProgressValue = value;\n      }\n    }\n    /** A getter that returns the siblings (that share the same parent) of a LayoutPanel item that is docked inside a DockingLayout. The siblings are also DockingLayout items ( LayoutPanels).Applicable only to TabsWindow when docked inside a DockingLayout.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"siblings\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.siblings : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.siblings = value;\n      }\n    }\n    /** Applicable to TabsWindow when nested inside a DockingLayout Custom Element. Determines the size of the item.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.size : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.size = value;\n      }\n    }\n    /** Specifies whether the element is to have its spelling and grammar checked or not. Applicable only to MultilinePromptWindow.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"spellCheck\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.spellCheck : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.spellCheck = value;\n      }\n    }\n    /** Sets or gets whether close buttons are displayed inside the Tab Strip of the TabsWindow. Applicable only to TabsWindow.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"tabCloseButtons\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tabCloseButtons : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tabCloseButtons = value;\n      }\n    }\n    /** Determines if the close button is visible on select or always. Applicable only to TabsWindow.\r\n    *\tProperty type: WindowTabCloseButtonMode | string\r\n    */\n  }, {\n    key: \"tabCloseButtonMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tabCloseButtonMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tabCloseButtonMode = value;\n      }\n    }\n    /** Sets or gets the Tabs scroll buttons behavior. Applicable only when tabLayout is 'scroll'. Applicable only to TabsWindow.\r\n    *\tProperty type: Overflow | string\r\n    */\n  }, {\n    key: \"tabOverflow\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tabOverflow : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tabOverflow = value;\n      }\n    }\n    /** Detetmines Tab Strip is positioned of the TabsWindow. Applicable only to TabsWindow.\r\n    *\tProperty type: TabPosition | string\r\n    */\n  }, {\n    key: \"tabPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tabPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tabPosition = value;\n      }\n    }\n    /** Sets or gets the position of the scroll buttons inside the Tab header of the TabsWindow. Applicable only to TabsWindow.\r\n    *\tProperty type: LayoutPosition | string\r\n    */\n  }, {\n    key: \"tabScrollButtonsPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tabScrollButtonsPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tabScrollButtonsPosition = value;\n      }\n    }\n    /** Sets or gets the orientation of the text in the tabs labels of the TabsWindow. Applicable only to TabsWindow.\r\n    *\tProperty type: Orientation | string\r\n    */\n  }, {\n    key: \"tabTextOrientation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tabTextOrientation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tabTextOrientation = value;\n      }\n    }\n    /** Determines the theme. Theme defines the look of the element\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.theme : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.theme = value;\n      }\n    }\n    /** If is set to true, the element cannot be focused.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"unfocusable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unfocusable = value;\n      }\n    }\n    /** Determines the value of the TextBox/ProgressBar inside the Dialog/Prompt/Progress Window\r\n    *\tProperty type: string | number\r\n    */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.value : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.value = value;\n      }\n    }\n    /** Determines the actual parent of the element. The window can size and move only in the area of that element.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"windowParent\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.windowParent : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.windowParent = value;\n      }\n    }\n    /** Indicates how the input wraps text. Applicable only to MultilinePromptWindow.\r\n    *\tProperty type: WindowWrap | string\r\n    */\n  }, {\n    key: \"wrap\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.wrap : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.wrap = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"addNewTab\", \"animation\", \"autoCapitalize\", \"autoExpand\", \"cancelLabel\", \"completeLabel\", \"confirmLabel\", \"collapsed\", \"closeOnMaskClick\", \"dataSource\", \"disabled\", \"disableSnap\", \"disableEscape\", \"disableKeyboard\", \"displayMode\", \"dropPosition\", \"formatFunction\", \"footerPosition\", \"footerTemplate\", \"headerButtons\", \"headerTemplate\", \"headerPosition\", \"hint\", \"indeterminate\", \"inverted\", \"label\", \"liveResize\", \"layout\", \"locale\", \"locked\", \"localizeFormatFunction\", \"maximized\", \"messages\", \"modal\", \"max\", \"min\", \"minimized\", \"maxLength\", \"minLength\", \"opened\", \"pinned\", \"placeholder\", \"promptLabel\", \"readonly\", \"resizeIndicator\", \"resizeMode\", \"rightToLeft\", \"required\", \"requiredMessage\", \"selectAllOnFocus\", \"selectedIndex\", \"selectionMode\", \"selectionEnd\", \"selectionStart\", \"showProgressValue\", \"siblings\", \"size\", \"spellCheck\", \"tabCloseButtons\", \"tabCloseButtonMode\", \"tabOverflow\", \"tabPosition\", \"tabScrollButtonsPosition\", \"tabTextOrientation\", \"theme\", \"unfocusable\", \"value\", \"windowParent\", \"wrap\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onOpening\", \"onOpen\", \"onClosing\", \"onClose\", \"onCollapse\", \"onDragEnd\", \"onDragStart\", \"onExpand\", \"onMaximize\", \"onMinimize\", \"onResizeEnd\", \"onResizeStart\", \"onRestore\", \"onCreate\", \"onReady\"];\n    }\n  }]);\n  return Window;\n}(React.Component);\nexport default Window;\nexport { Smart, Window };","map":null,"metadata":{},"sourceType":"module"}
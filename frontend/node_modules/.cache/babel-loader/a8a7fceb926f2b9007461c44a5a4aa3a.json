{"ast":null,"code":"import _classCallCheck from \"/home/benu/test_calendar/Scheduler/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/benu/test_calendar/Scheduler/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/benu/test_calendar/Scheduler/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/benu/test_calendar/Scheduler/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/benu/test_calendar/Scheduler/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nif (!window['Smart']) {\n  window['Smart'] = {\n    RenderMode: 'manual'\n  };\n} else {\n  window['Smart'].RenderMode = 'manual';\n}\nimport '../source/modules/smart.tree';\nimport React from 'react';\nvar Smart = window.Smart;\n/**\r\n Defines a tree items.\r\n*/\nvar TreeItem = /*#__PURE__*/function (_React$Component) {\n  _inherits(TreeItem, _React$Component);\n  function TreeItem(props) {\n    var _this;\n    _classCallCheck(this, TreeItem);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeItem).call(this, props));\n    _this.componentRef = React.createRef();\n    return _this;\n  }\n  // Gets the id of the React component.\n  _createClass(TreeItem, [{\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop in props) {\n        if (_prop === 'class' || _prop === 'className') {\n          var classNames = props[_prop].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop] !== that.nativeElement[_prop]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop === 'hover' || _prop === 'active' || _prop === 'focus' || _prop === 'selected') {\n            that.nativeElement.setAttribute(_prop, '');\n          }\n          var normalizedProp = normalizeProp(_prop);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop, props[_prop]);\n          }\n          if (props[_prop] !== undefined) {\n            if (typeof props[_prop] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-tree-item\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'TreeItem' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Enables or disables element.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /**\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"label\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.label : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.label = value;\n      }\n    }\n    /**\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"level\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.level : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.level = value;\n      }\n    }\n    /**\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selected : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selected = value;\n      }\n    }\n    /**\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"separator\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.separator : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.separator = value;\n      }\n    }\n    /**\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"shortcut\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.shortcut : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.shortcut = value;\n      }\n    }\n    /**\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.value : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.value = value;\n      }\n    }\n    /** Disables user interaction with the item.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"disabled\", \"label\", \"level\", \"selected\", \"separator\", \"shortcut\", \"value\", \"readonly\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onCreate\", \"onReady\"];\n    }\n  }]);\n  return TreeItem;\n}(React.Component);\nvar Smart$1 = window.Smart;\n/**\r\n Defines a group of tree items.\r\n*/\nvar TreeItemsGroup = /*#__PURE__*/function (_React$Component2) {\n  _inherits(TreeItemsGroup, _React$Component2);\n  function TreeItemsGroup(props) {\n    var _this2;\n    _classCallCheck(this, TreeItemsGroup);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TreeItemsGroup).call(this, props));\n    _this2.componentRef = React.createRef();\n    return _this2;\n  }\n  // Gets the id of the React component.\n  _createClass(TreeItemsGroup, [{\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop2 in props) {\n        if (_prop2 === 'class' || _prop2 === 'className') {\n          var classNames = props[_prop2].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop2] !== that.nativeElement[_prop2]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop2 === 'hover' || _prop2 === 'active' || _prop2 === 'focus' || _prop2 === 'selected') {\n            that.nativeElement.setAttribute(_prop2, '');\n          }\n          var normalizedProp = normalizeProp(_prop2);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop2, props[_prop2]);\n          }\n          if (props[_prop2] !== undefined) {\n            if (typeof props[_prop2] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop2]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop2];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-tree-items-group\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'TreeItemsGroup' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Enables or disables element.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /**\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"expanded\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.expanded : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.expanded = value;\n      }\n    }\n    /**\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"label\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.label : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.label = value;\n      }\n    }\n    /**\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"level\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.level : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.level = value;\n      }\n    }\n    /**\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selected : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selected = value;\n      }\n    }\n    /**\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"separator\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.separator : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.separator = value;\n      }\n    }\n    /**\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.value : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.value = value;\n      }\n    }\n    /** Disables user interaction with the item.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"disabled\", \"expanded\", \"label\", \"level\", \"selected\", \"separator\", \"value\", \"readonly\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onCreate\", \"onReady\"];\n    }\n  }]);\n  return TreeItemsGroup;\n}(React.Component);\nvar Smart$2 = window.Smart;\n/**\r\n Treeview component is a user interface that is used to represent hierarchical data in a tree structure.\r\n*/\nvar Tree = /*#__PURE__*/function (_React$Component3) {\n  _inherits(Tree, _React$Component3);\n  function Tree(props) {\n    var _this3;\n    _classCallCheck(this, Tree);\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Tree).call(this, props));\n    _this3.componentRef = React.createRef();\n    return _this3;\n  }\n  // Gets the id of the React component.\n  _createClass(Tree, [{\n    key: \"addAfter\",\n    /** Adds an item after another item as a sibling.\r\n    * @param {HTMLElement} item. A jqx-tree-item/jqx-tree-items-group to add to the Tree\r\n    * @param {string | HTMLElement} sibling. The jqx-tree-item/jqx-tree-items-group (or its id or numeric path) to add the item after.\r\n    */\n    value: function addAfter(item, sibling) {\n      var _this4 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.addAfter(item, sibling);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this4.nativeElement.addAfter(item, sibling);\n        });\n      }\n    }\n    /** Adds an item before another item as a sibling.\r\n    * @param {HTMLElement} item. A jqx-tree-item/jqx-tree-items-group to add to the Tree\r\n    * @param {string | HTMLElement} sibling. The jqx-tree-item/jqx-tree-items-group (or its id or numeric path) to add the item before.\r\n    */\n  }, {\n    key: \"addBefore\",\n    value: function addBefore(item, sibling) {\n      var _this5 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.addBefore(item, sibling);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this5.nativeElement.addBefore(item, sibling);\n        });\n      }\n    }\n    /** Adds an item as the last child of a parent item.\r\n    * @param {HTMLElement} item. A jqx-tree-item/jqx-tree-items-group to add to the Tree\r\n    * @param {string | HTMLElement} parent?. The jqx-tree-items-group (or its id or numeric path) to add the item to.\r\n    */\n  }, {\n    key: \"addTo\",\n    value: function addTo(item, parent) {\n      var _this6 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.addTo(item, parent);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this6.nativeElement.addTo(item, parent);\n        });\n      }\n    }\n    /** Clears selection.\r\n    */\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      var _this7 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.clearSelection();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this7.nativeElement.clearSelection();\n        });\n      }\n    }\n    /** Collapses all smart-tree-items-groups.\r\n    * @param {boolean} animation?. If set to false, disables collapse animation even if animation is enabled for the element.\r\n    */\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll(animation) {\n      var _this8 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.collapseAll(animation);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this8.nativeElement.collapseAll(animation);\n        });\n      }\n    }\n    /** Collapses a smart-tree-items-group.\r\n    * @param {HTMLElement | string} item. jqx-tree-items-group (or its id or numeric path).\r\n    * @param {boolean} animation?. If set to false, disables collapse animation even if animation is enabled for the element.\r\n    */\n  }, {\n    key: \"collapseItem\",\n    value: function collapseItem(item, animation) {\n      var _this9 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.collapseItem(item, animation);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this9.nativeElement.collapseItem(item, animation);\n        });\n      }\n    }\n    /** Makes sure an item is visible by scrolling to it.\r\n    * @param {HTMLElement | string} item. The id or numeric path of an item\r\n    */\n  }, {\n    key: \"ensureVisible\",\n    value: function ensureVisible(item) {\n      var _this10 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.ensureVisible(item);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this10.nativeElement.ensureVisible(item);\n        });\n      }\n    }\n    /** Expands all smart-tree-items-groups.\r\n    * @param {string} animation?. If set to false, disables expand animation even if animation is enabled for the element.\r\n    */\n  }, {\n    key: \"expandAll\",\n    value: function expandAll(animation) {\n      var _this11 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.expandAll(animation);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this11.nativeElement.expandAll(animation);\n        });\n      }\n    }\n    /** Expands single smart-tree-items-group.\r\n    * @param {HTMLElement | string} item. jqx-tree-items-group (or its id or numeric path).\r\n    * @param {boolean} animation?. If set to false, disables expand animation even if animation is enabled for the element.\r\n    */\n  }, {\n    key: \"expandItem\",\n    value: function expandItem(item, animation) {\n      var _this12 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.expandItem(item, animation);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this12.nativeElement.expandItem(item, animation);\n        });\n      }\n    }\n    /** Applies filter to the Tree.\r\n    * @param {string} filterQuery. Filter query.\r\n    */\n  }, {\n    key: \"filter\",\n    value: function filter(filterQuery) {\n      var _this13 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.filter(filterQuery);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this13.nativeElement.filter(filterQuery);\n        });\n      }\n    }\n    /** Gets an item by its id or numeric path.\r\n    * @param {string} id. The id or numeric path of an item.\r\n    * @returns {HTMLElement}\r\n    */\n  }, {\n    key: \"getItem\",\n    value: function getItem(id) {\n      var result = this.nativeElement.getItem(id);\n      return result;\n    }\n    /** Gets the selected values. If value is not defined, returns the selected labels.\r\n    * @returns {string[]}\r\n    */\n  }, {\n    key: \"getSelectedValues\",\n    value: function getSelectedValues() {\n      var result = this.nativeElement.getSelectedValues();\n      return result;\n    }\n    /** Returns SmartTree's state\r\n    * @returns {any}\r\n    */\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      var result = this.nativeElement.getState();\n      return result;\n    }\n    /** Inserts an item at the given position.\r\n    * @param {any} item. A jqx-tree-item/jqx-tree-items-group (or an Object to create an item from) to add to the Tree. If an Object is passed, the available fields are <strong>tagName</strong> (<em>'jqx-tree-item'</em> - default - or <em>'jqx-tree-items-group'</em>), <strong>disabled</strong>, <strong>expanded</strong> (only if <strong>tagName</strong> is <em>'jqx-tree-items-group'</em>), <strong>(items)</strong> (only if <strong>tagName</strong> is <em>'jqx-tree-items-group'</em>), <strong>(label)</strong>, <strong>separator</strong>, <strong>shortcut</strong> (only if <strong>tagName</strong> is <em>'jqx-tree-item'</em>), and <strong>(value)</strong>. (items), (label), and (value) have to correspond to the values of <strong>itemsMember</strong>, <strong>displayMember</strong>, and <strong>valueMember</strong> respectively.\r\n    * @param {string} path?. The path to insert the item at.\r\n    */\n  }, {\n    key: \"insert\",\n    value: function insert(item, path) {\n      var _this14 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.insert(item, path);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this14.nativeElement.insert(item, path);\n        });\n      }\n    }\n    /** Loads the Tree's state.\r\n    * @param {any} state?. An object returned by one of the methods <strong>getState</strong> or <strong>saveState</strong>. If a state is not passed, the method tries to load the state from the browser's localStorage.\r\n    */\n  }, {\n    key: \"loadState\",\n    value: function loadState(state) {\n      var _this15 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.loadState(state);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this15.nativeElement.loadState(state);\n        });\n      }\n    }\n    /** Moves an item down relative to its siblings.\r\n    * @param {HTMLElement | string} item. The jqx-tree-item/jqx-tree-items-group (or its id or numeric path) to remove.\r\n    */\n  }, {\n    key: \"moveDown\",\n    value: function moveDown(item) {\n      var _this16 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.moveDown(item);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this16.nativeElement.moveDown(item);\n        });\n      }\n    }\n    /** Moves an item up relative to its siblings.\r\n    * @param {HTMLElement | string} item. The jqx-tree-item/jqx-tree-items-group (or its id or numeric path) to remove.\r\n    */\n  }, {\n    key: \"moveUp\",\n    value: function moveUp(item) {\n      var _this17 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.moveUp(item);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this17.nativeElement.moveUp(item);\n        });\n      }\n    }\n    /** Removes an item.\r\n    * @param {HTMLElement | string} item. The jqx-tree-item/jqx-tree-items-group (or its id or numeric path) to remove.\r\n    */\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(item) {\n      var _this18 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.removeItem(item);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this18.nativeElement.removeItem(item);\n        });\n      }\n    }\n    /** Saves the Tree's state.\r\n    * @returns {any}\r\n    */\n  }, {\n    key: \"saveState\",\n    value: function saveState() {\n      var result = this.nativeElement.saveState();\n      return result;\n    }\n    /** Selects an item by its index or by HTMLElement id.\r\n    * @param {HTMLElement | string} item. The jqx-tree-item/jqx-tree-items-group (or its id or numeric path) to remove.\r\n    */\n  }, {\n    key: \"select\",\n    value: function select(item) {\n      var _this19 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.select(item);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this19.nativeElement.select(item);\n        });\n      }\n    }\n    /** Selects an item or items by values.\r\n    * @param {string | string[]} items. The jqx-tree-item/jqx-tree-items-group values or labels, if values are not defined.\r\n    */\n  }, {\n    key: \"setSelectedValues\",\n    value: function setSelectedValues(items) {\n      var _this20 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.setSelectedValues(items);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this20.nativeElement.setSelectedValues(items);\n        });\n      }\n    }\n    /** Unselects an item by its index or by HTMLElement id.\r\n    * @param {HTMLElement | string} item. The jqx-tree-item/jqx-tree-items-group (or its id or numeric path) to remove.\r\n    */\n  }, {\n    key: \"unselect\",\n    value: function unselect(item) {\n      var _this21 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.unselect(item);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this21.nativeElement.unselect(item);\n        });\n      }\n    }\n    /** Unselects an item or items by values.\r\n    * @param {string | string[]} items. The jqx-tree-item/jqx-tree-items-group values or labels, if values are not defined.\r\n    */\n  }, {\n    key: \"unselectValues\",\n    value: function unselectValues(items) {\n      var _this22 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.unselectValues(items);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this22.nativeElement.unselectValues(items);\n        });\n      }\n    }\n    /** Updates an item.\r\n    * @param {HTMLElement | string} item. jqx-tree-item/jqx-tree-items-group (or its id or numeric path).\r\n    * @param {any} newItem. An object with updated properties.\r\n    */\n  }, {\n    key: \"updateItem\",\n    value: function updateItem(item, newItem) {\n      var _this23 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.updateItem(item, newItem);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this23.nativeElement.updateItem(item, newItem);\n        });\n      }\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop3 in props) {\n        if (_prop3 === 'class' || _prop3 === 'className') {\n          var classNames = props[_prop3].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop3] !== that.nativeElement[_prop3]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop3 === 'hover' || _prop3 === 'active' || _prop3 === 'focus' || _prop3 === 'selected') {\n            that.nativeElement.setAttribute(_prop3, '');\n          }\n          var normalizedProp = normalizeProp(_prop3);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop3, props[_prop3]);\n          }\n          if (props[_prop3] !== undefined) {\n            if (typeof props[_prop3] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop3]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop3];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        Smart$2.Render();\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-tree\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'Tree' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Allows drag operation in current tree. When enabled, items can be dragged and dropped to a tree with enabled allowDrop.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"allowDrag\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.allowDrag : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.allowDrag = value;\n      }\n    }\n    /** Allows drop operation. Dropped items could originate from the current tree or another tree.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"allowDrop\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.allowDrop : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.allowDrop = value;\n      }\n    }\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation | string\r\n    */\n  }, {\n    key: \"animation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.animation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.animation = value;\n      }\n    }\n    /** Automatically hides the tree's toggle element (arrow) on mouseleave and shows it on mouseenter.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"autoHideToggleElement\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.autoHideToggleElement : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.autoHideToggleElement = value;\n      }\n    }\n    /** Enables or disables auto load state from the browser's localStorage. Information about filtering, sorting, expanded and selected items is loaded.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"autoLoadState\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.autoLoadState : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.autoLoadState = value;\n      }\n    }\n    /** Enables or disables auto save state to the browser's localStorage. Information about filtering, sorting, expanded and selected items is saved.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"autoSaveState\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.autoSaveState : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.autoSaveState = value;\n      }\n    }\n    /** Enables or disables auto sorting. If modifications are made to a sorted tree, but autoSort is false, the tree will not be re-sorted automatically.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"autoSort\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.autoSort : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.autoSort = value;\n      }\n    }\n    /** Determines the data source that will be loaded to the Tree.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"dataSource\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dataSource : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dataSource = value;\n      }\n    }\n    /** Enables or disables jqxTree.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /** Shows or hides loading indicator.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"displayLoadingIndicator\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.displayLoadingIndicator : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.displayLoadingIndicator = value;\n      }\n    }\n    /** Determines the field in the data source that corresponds to an item's label.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"displayMember\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.displayMember : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.displayMember = value;\n      }\n    }\n    /** A callback function for customizing the HTML of the drag feedback. It receives one parameter - an array of the currently dragged items.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"dragFeedbackFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dragFeedbackFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dragFeedbackFormatFunction = value;\n      }\n    }\n    /** Determines the offset of the drag feedback element from the mouse cursor when dragging items. The first member of the array is the horizontal offset and the second one - the vertical offset.\r\n    *\tProperty type: number[]\r\n    */\n  }, {\n    key: \"dragOffset\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dragOffset : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dragOffset = value;\n      }\n    }\n    /** Enables or disables item's editting. An edit operation can be initiated by double-clicking a tree item or pressing F2 while an item is selected.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"editable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.editable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.editable = value;\n      }\n    }\n    /** Determines the expand behavior of TreeItemsGroups in the Tree.\r\n    *\tProperty type: TreeExpandMode | string\r\n    */\n  }, {\n    key: \"expandMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.expandMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.expandMode = value;\n      }\n    }\n    /** Enables or disables filtering. Shows or hides filter input.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"filterable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.filterable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.filterable = value;\n      }\n    }\n    /** Applies a filter only after the 'Enter' key is pressed.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"filterOnEnter\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.filterOnEnter : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.filterOnEnter = value;\n      }\n    }\n    /** Sets custom text for placeholder in the filter input.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"filterInputPlaceholder\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.filterInputPlaceholder : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.filterInputPlaceholder = value;\n      }\n    }\n    /** Determines the TreeItem property that will be used as a filtering criteria. By default the label property is used. It can be set to 'value' if the user wants to filter by the value property or 'textContent' if the user wants to filter by text inside the TreeItem's content or any other property.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"filterMember\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.filterMember : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.filterMember = value;\n      }\n    }\n    /** Sets filter mode.\r\n    *\tProperty type: FilterMode | string\r\n    */\n  }, {\n    key: \"filterMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.filterMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.filterMode = value;\n      }\n    }\n    /** Sets or gets whether the tree checkboxes have three states - checked, unchecked and indeterminate. Whorks on selectionMode: 'checkBox'\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"hasThreeStates\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.hasThreeStates : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.hasThreeStates = value;\n      }\n    }\n    /** Determines the field in the data source that corresponds to an item group's subitems collection.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"itemsMember\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.itemsMember : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.itemsMember = value;\n      }\n    }\n    /** Sets custom text for placeholder in the loading indicator if loadingIndicatorPosition is set to 'top' or 'bottom'.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"loadingIndicatorPlaceholder\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.loadingIndicatorPlaceholder : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.loadingIndicatorPlaceholder = value;\n      }\n    }\n    /** Sets the position of the loading indicator.\r\n    *\tProperty type: VerticalAlignment | string\r\n    */\n  }, {\n    key: \"loadingIndicatorPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.loadingIndicatorPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.loadingIndicatorPosition = value;\n      }\n    }\n    /** Sets or gets the locale. Used in conjunction with the property messages.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locale = value;\n      }\n    }\n    /** Callback, related to localization module.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"localizeFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.localizeFormatFunction = value;\n      }\n    }\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.messages : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.messages = value;\n      }\n    }\n    /** Specifies what should happen with the scrollbar (or scroll buttons in scrollMode: 'scrollButtons') if content overflows the element's box.\r\n    *\tProperty type: Overflow | string\r\n    */\n  }, {\n    key: \"overflow\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.overflow : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.overflow = value;\n      }\n    }\n    /** If the element is readonly, users cannot interact with it.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    }\n    /** Determines whether the right-to-left support is enabled.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"rightToLeft\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.rightToLeft : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.rightToLeft = value;\n      }\n    }\n    /** Determines whether to use scrollbar or scrollButtons when content overflows an element's box.\r\n    *\tProperty type: TreeScrollMode | string\r\n    */\n  }, {\n    key: \"scrollMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.scrollMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.scrollMode = value;\n      }\n    }\n    /** An array with indexes (paths) of the selected items.\r\n    *\tProperty type: string[]\r\n    */\n  }, {\n    key: \"selectedIndexes\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectedIndexes : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectedIndexes = value;\n      }\n    }\n    /** Determines the way selected items are highlighted.\r\n    *\tProperty type: TreeSelectionDisplayMode | string\r\n    */\n  }, {\n    key: \"selectionDisplayMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectionDisplayMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectionDisplayMode = value;\n      }\n    }\n    /** Determines selection mode.\r\n    *\tProperty type: TreeSelectionMode | string\r\n    */\n  }, {\n    key: \"selectionMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectionMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectionMode = value;\n      }\n    }\n    /** Determines whether smart-tree-items-groups can be selected.\r\n    *\tProperty type: TreeSelectionTarget | string\r\n    */\n  }, {\n    key: \"selectionTarget\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectionTarget : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectionTarget = value;\n      }\n    }\n    /** Shows or hides lines, displaying the relation between elements in group.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"showLines\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.showLines : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.showLines = value;\n      }\n    }\n    /** Shows or hides lines starting from the root node. Enabled when 'showLines' is set to true.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"showRootLines\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.showRootLines : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.showRootLines = value;\n      }\n    }\n    /** Sets user-defined function about custom sorting.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"sort\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.sort : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.sort = value;\n      }\n    }\n    /** Determines sort direction - ascending or descending.\r\n    *\tProperty type: TreeSortDirection | string\r\n    */\n  }, {\n    key: \"sortDirection\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.sortDirection : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.sortDirection = value;\n      }\n    }\n    /** Enables or disables sorting.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"sorted\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.sorted : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.sorted = value;\n      }\n    }\n    /** Sets or gets the element's visual theme.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.theme : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.theme = value;\n      }\n    }\n    /** Determines togle element (arrow) position.\r\n    *\tProperty type: Position | string\r\n    */\n  }, {\n    key: \"toggleElementPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.toggleElementPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.toggleElementPosition = value;\n      }\n    }\n    /** Determines the way to toggle smart-tree-items-groups.\r\n    *\tProperty type: TreeToggleMode | string\r\n    */\n  }, {\n    key: \"toggleMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.toggleMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.toggleMode = value;\n      }\n    }\n    /** Sets or gets if the element can be focused.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"unfocusable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unfocusable = value;\n      }\n    }\n    /** Determines the field in the data source that corresponds to an item's value.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"valueMember\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.valueMember : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.valueMember = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"allowDrag\", \"allowDrop\", \"animation\", \"autoHideToggleElement\", \"autoLoadState\", \"autoSaveState\", \"autoSort\", \"dataSource\", \"disabled\", \"displayLoadingIndicator\", \"displayMember\", \"dragFeedbackFormatFunction\", \"dragOffset\", \"editable\", \"expandMode\", \"filterable\", \"filterOnEnter\", \"filterInputPlaceholder\", \"filterMember\", \"filterMode\", \"hasThreeStates\", \"itemsMember\", \"loadingIndicatorPlaceholder\", \"loadingIndicatorPosition\", \"locale\", \"localizeFormatFunction\", \"messages\", \"overflow\", \"readonly\", \"rightToLeft\", \"scrollMode\", \"selectedIndexes\", \"selectionDisplayMode\", \"selectionMode\", \"selectionTarget\", \"showLines\", \"showRootLines\", \"sort\", \"sortDirection\", \"sorted\", \"theme\", \"toggleElementPosition\", \"toggleMode\", \"unfocusable\", \"valueMember\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onChange\", \"onCollapse\", \"onCollapsing\", \"onDragEnd\", \"onDragging\", \"onDragStart\", \"onExpand\", \"onExpanding\", \"onScrollBottomReached\", \"onScrollTopReached\", \"onSwipeleft\", \"onSwiperight\", \"onCreate\", \"onReady\"];\n    }\n  }]);\n  return Tree;\n}(React.Component);\nexport default Tree;\nexport { Smart$2 as Smart, Tree, TreeItem, TreeItemsGroup };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nif (!window['Smart']) {\n  window['Smart'] = {\n    RenderMode: 'manual'\n  };\n} else {\n  window['Smart'].RenderMode = 'manual';\n}\nimport '../source/modules/smart.input';\nimport React from 'react';\nvar Smart = window.Smart;\n/**\r\n Input specifies an input field where the user can enter data. Auto-complete options are displayed for easier input.\r\n*/\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inherits(Input, _React$Component);\n  function Input(props) {\n    var _this;\n    _classCallCheck(this, Input);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, props));\n    _this.componentRef = React.createRef();\n    return _this;\n  }\n  // Gets the id of the React component.\n  _createClass(Input, [{\n    key: \"close\",\n    /** Closes the drop down.\r\n    */\n    value: function close() {\n      var _this2 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.close();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this2.nativeElement.close();\n        });\n      }\n    }\n    /** Ensures that the active ( selected ) item is always visible.\r\n    */\n  }, {\n    key: \"ensureVisible\",\n    value: function ensureVisible() {\n      var _this3 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.ensureVisible();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this3.nativeElement.ensureVisible();\n        });\n      }\n    }\n    /** Opens the drop down.\r\n    */\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this4 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.open();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this4.nativeElement.open();\n        });\n      }\n    }\n    /** Focuses and selects the text inside the input or if it is readonly then the element is focused.\r\n    */\n  }, {\n    key: \"select\",\n    value: function select() {\n      var _this5 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.select();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this5.nativeElement.select();\n        });\n      }\n    }\n    /** Selects an item by value. For example, if your data source is ['Item 1', 'Item 2', 'Item 3'], you can use 'Item 1' as an argument. If your data source is an object with label and value, pass the value when you call selectItem.\r\n    * @param {string | number} value. The item's value when the item is an object or string when the item is a string item.\r\n    */\n  }, {\n    key: \"selectItem\",\n    value: function selectItem(value) {\n      var _this6 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.selectItem(value);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this6.nativeElement.selectItem(value);\n        });\n      }\n    }\n    /** Gets an item by value. For example, if your data source is ['Item 1', 'Item 2', 'Item 3'], you can use 'Item 1' as an argument. If your data source is an object with label and value, pass the value when you call selectItem.\r\n    * @param {string | number} value. The item's value when the item is an object or string when the item is a string item.\r\n    * @returns {any}\r\n    */\n  }, {\n    key: \"getItem\",\n    value: function getItem(value) {\n      var result = this.nativeElement.getItem(value);\n      return result;\n    }\n    /** Gets the selected item. For example, if your data source is ['Item 1', 'Item 2', 'Item 3'] and the user selected the second item, the method returns 'Item 2'. If your data source is an object with label and value, the returned value would be the 'value'.\r\n    * @param {string | number} value. The item's value when the item is an object or string when the item is a string item.\r\n    * @returns {any}\r\n    */\n  }, {\n    key: \"getSelectedItem\",\n    value: function getSelectedItem(value) {\n      var result = this.nativeElement.getSelectedItem(value);\n      return result;\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop in props) {\n        if (_prop === 'class' || _prop === 'className') {\n          var classNames = props[_prop].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop] !== that.nativeElement[_prop]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop === 'hover' || _prop === 'active' || _prop === 'focus' || _prop === 'selected') {\n            that.nativeElement.setAttribute(_prop, '');\n          }\n          var normalizedProp = normalizeProp(_prop);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop, props[_prop]);\n          }\n          if (props[_prop] !== undefined) {\n            if (typeof props[_prop] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        Smart.Render();\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-input\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'Input' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Determines the delay before the drop down opens to show the matches from the auto complete operation. The delay is measured in miliseconds.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"autoCompleteDelay\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.autoCompleteDelay : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.autoCompleteDelay = value;\n      }\n    }\n    /** Determines the data source that will be loaded to the Input. The dataSource can be an array of strings/numbers or objects where the attributes represent the properties of a List Item. For example label, value. It can also be a callback that returns an Array of items as previously described. The data source item object may have the following fields: 'label' - string, 'value' - string or number, 'selected' - boolean, 'prefix' - string, 'suffix' - string, 'title' - string. The 'prefix' and 'suffix' add html before and after the label.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"dataSource\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dataSource : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dataSource = value;\n      }\n    }\n    /** Enables or disables the element.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /** Sets additional class names to the Input drop down.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"dropDownClassList\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dropDownClassList : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dropDownClassList = value;\n      }\n    }\n    /** Determines the position of the drop down button.\r\n    *\tProperty type: DropDownButtonPosition | string\r\n    */\n  }, {\n    key: \"dropDownButtonPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dropDownButtonPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dropDownButtonPosition = value;\n      }\n    }\n    /** Sets the height of the drop down. By default it's set to an empty string. In this case the height of the drop down is controlled by a CSS variable.\r\n    *\tProperty type: string | number\r\n    */\n  }, {\n    key: \"dropDownHeight\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dropDownHeight : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dropDownHeight = value;\n      }\n    }\n    /** Sets the width of the drop down. By default it's set to an empty string. In this case the width of the drop down is controlled by a CSS variable.\r\n    *\tProperty type: string | number\r\n    */\n  }, {\n    key: \"dropDownWidth\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dropDownWidth : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dropDownWidth = value;\n      }\n    }\n    /** Sets the purpose of the input and what, if any, permission the user agent has to provide automated assistance in filling out the element's input when in a form, as well as guidance to the browser as to the type of information expected in the element. This value corresponds to the standard HTML autocomplete attribute and can be set to values such as 'on', 'name', 'organization', 'street-address', etc.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"inputPurpose\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.inputPurpose : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.inputPurpose = value;\n      }\n    }\n    /** Determines the maximum number of matched items that should be visible inside the drop down as a result of a new autoComplete query. By default the maximum number of 8 items can be displayed inside the drop down.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"items\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.items : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.items = value;\n      }\n    }\n    /** Sets or gets the language. Used in conjunction with the property messages.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locale = value;\n      }\n    }\n    /** Callback used to customize the format of the messages that are returned from the Localization Module.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"localizeFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.localizeFormatFunction = value;\n      }\n    }\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.messages : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.messages = value;\n      }\n    }\n    /** Determines the minimum number of characters inside the input in order to trigger the autocomplete functionality that will open the drop down and show the matched items.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"minLength\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.minLength : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.minLength = value;\n      }\n    }\n    /** Sets or gets the name attribute for the element. Name is used when submiting data inside an HTML form.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.name : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.name = value;\n      }\n    }\n    /** Determines whether the drop down is opened or not.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"opened\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.opened : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.opened = value;\n      }\n    }\n    /** Determines the placeholder of the input.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.placeholder : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.placeholder = value;\n      }\n    }\n    /** Sets or gets the query that is used to filter the items. Query is used by the autoComplete operation. Empty string means that all items from the data source will be displayed and no filter query is applied.\r\n    *\tProperty type: string | number\r\n    */\n  }, {\n    key: \"query\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.query : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.query = value;\n      }\n    }\n    /** Determines the auto complete query mode. This property also determines the matching algorithm for the autocomplete operation.\r\n    *\tProperty type: InputQueryMode | string\r\n    */\n  }, {\n    key: \"queryMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.queryMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.queryMode = value;\n      }\n    }\n    /** Determines whether ot not the user can enter text inside the input. if dropDownButtonPosition is set to 'left' or 'right' then readonly determines whether the element acts as a ComboBox or a DropDownList if a dataSource is provided.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    }\n    /** Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"rightToLeft\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.rightToLeft : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.rightToLeft = value;\n      }\n    }\n    /** Determines whether the items are sorted alphabetically or not\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"sorted\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.sorted : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.sorted = value;\n      }\n    }\n    /** Determines the sorting algorithm - ascending(asc) or descending(desc) if sort is enabled.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"sortDirection\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.sortDirection : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.sortDirection = value;\n      }\n    }\n    /** Determines the selected index.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectedIndex : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectedIndex = value;\n      }\n    }\n    /** Determines the selected value.\r\n    *\tProperty type: string | number\r\n    */\n  }, {\n    key: \"selectedValue\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectedValue : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectedValue = value;\n      }\n    }\n    /** Determines the theme for the element. Themes define the look of the elements.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.theme : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.theme = value;\n      }\n    }\n    /** Determines the input type. Input type determines what input can be entered.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.type : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.type = value;\n      }\n    }\n    /** If is set to true, the element cannot be focused.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"unfocusable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unfocusable = value;\n      }\n    }\n    /** Sets or gets the value of the element.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.value : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.value = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"autoCompleteDelay\", \"dataSource\", \"disabled\", \"dropDownClassList\", \"dropDownButtonPosition\", \"dropDownHeight\", \"dropDownWidth\", \"inputPurpose\", \"items\", \"locale\", \"localizeFormatFunction\", \"messages\", \"minLength\", \"name\", \"opened\", \"placeholder\", \"query\", \"queryMode\", \"readonly\", \"rightToLeft\", \"sorted\", \"sortDirection\", \"selectedIndex\", \"selectedValue\", \"theme\", \"type\", \"unfocusable\", \"value\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onChange\", \"onChanging\", \"onOpen\", \"onClose\", \"onItemClick\", \"onCreate\", \"onReady\"];\n    }\n  }]);\n  return Input;\n}(React.Component);\nexport default Input;\nexport { Smart, Input };","map":null,"metadata":{},"sourceType":"module"}
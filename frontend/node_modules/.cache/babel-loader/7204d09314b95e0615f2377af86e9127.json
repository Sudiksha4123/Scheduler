{"ast":null,"code":"import _classCallCheck from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nif (!window['Smart']) {\n  window['Smart'] = {\n    RenderMode: 'manual'\n  };\n} else {\n  window['Smart'].RenderMode = 'manual';\n}\nimport '../source/modules/smart.button';\nimport React from 'react';\nvar Smart = window.Smart;\n/**\r\n RepatButton provides press-and-hold functionality and it is an ideal UI component for allowing end-users to control an increasing or decreasing value.\r\n*/\nvar RepeatButton = /*#__PURE__*/function (_React$Component) {\n  _inherits(RepeatButton, _React$Component);\n  function RepeatButton(props) {\n    var _this;\n    _classCallCheck(this, RepeatButton);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RepeatButton).call(this, props));\n    _this.componentRef = React.createRef();\n    return _this;\n  }\n  // Gets the id of the React component.\n  _createClass(RepeatButton, [{\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop in props) {\n        if (_prop === 'class' || _prop === 'className') {\n          var classNames = props[_prop].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop] !== that.nativeElement[_prop]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop === 'hover' || _prop === 'active' || _prop === 'focus' || _prop === 'selected') {\n            that.nativeElement.setAttribute(_prop, '');\n          }\n          var normalizedProp = normalizeProp(_prop);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop, props[_prop]);\n          }\n          if (props[_prop] !== undefined) {\n            if (typeof props[_prop] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        Smart.Render();\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-repeat-button\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'RepeatButton' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation | string\r\n    */\n  }, {\n    key: \"animation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.animation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.animation = value;\n      }\n    }\n    /** Sets the click mode of the button.\r\n    *\tProperty type: ClickMode | string\r\n    */\n  }, {\n    key: \"clickMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.clickMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.clickMode = value;\n      }\n    }\n    /** Sets the delay between repeats in miliseconds.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"delay\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.delay : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.delay = value;\n      }\n    }\n    /** Enables or disables the ratio button.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /** Sets a delay before the first repeat iteration in miliseconds.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"initialDelay\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.initialDelay : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.initialDelay = value;\n      }\n    }\n    /** Sets the inner HTML of the element.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"innerHTML\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.innerHTML : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.innerHTML = value;\n      }\n    }\n    /** Sets or gets the language. Used in conjunction with the property messages.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locale = value;\n      }\n    }\n    /** Callback, related to localization module.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"localizeFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.localizeFormatFunction = value;\n      }\n    }\n    /** Sets an object with string values, related to the different states of passwords strength.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.messages : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.messages = value;\n      }\n    }\n    /** Sets or gets the widget's name.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.name : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.name = value;\n      }\n    }\n    /** If the custom element is readonly, it cannot be interacted with.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    }\n    /** Determines the theme. Theme defines the look of the element\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.theme : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.theme = value;\n      }\n    }\n    /** If is set to true, the element cannot be focused.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"unfocusable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unfocusable = value;\n      }\n    }\n    /** Sets or gets the widget's value.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.value : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.value = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"animation\", \"clickMode\", \"delay\", \"disabled\", \"initialDelay\", \"innerHTML\", \"locale\", \"localizeFormatFunction\", \"messages\", \"name\", \"readonly\", \"theme\", \"unfocusable\", \"value\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onClick\", \"onCreate\", \"onReady\"];\n    }\n  }]);\n  return RepeatButton;\n}(React.Component);\nvar Smart$1 = window.Smart;\n/**\r\n ToggleButton allows the user to change a setting between two states.\r\n*/\nvar ToggleButton = /*#__PURE__*/function (_React$Component2) {\n  _inherits(ToggleButton, _React$Component2);\n  function ToggleButton(props) {\n    var _this2;\n    _classCallCheck(this, ToggleButton);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ToggleButton).call(this, props));\n    _this2.componentRef = React.createRef();\n    return _this2;\n  }\n  // Gets the id of the React component.\n  _createClass(ToggleButton, [{\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop2 in props) {\n        if (_prop2 === 'class' || _prop2 === 'className') {\n          var classNames = props[_prop2].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop2] !== that.nativeElement[_prop2]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop2 === 'hover' || _prop2 === 'active' || _prop2 === 'focus' || _prop2 === 'selected') {\n            that.nativeElement.setAttribute(_prop2, '');\n          }\n          var normalizedProp = normalizeProp(_prop2);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop2, props[_prop2]);\n          }\n          if (props[_prop2] !== undefined) {\n            if (typeof props[_prop2] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop2]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop2];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        Smart$1.Render();\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-toggle-button\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'ToggleButton' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation | string\r\n    */\n  }, {\n    key: \"animation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.animation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.animation = value;\n      }\n    }\n    /** Sets the state of the element.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.checked : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.checked = value;\n      }\n    }\n    /** Sets the click mode of the button.\r\n    *\tProperty type: ClickMode | string\r\n    */\n  }, {\n    key: \"clickMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.clickMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.clickMode = value;\n      }\n    }\n    /** Enables or disables the ratio button.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /** Sets the inner HTML of the element.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"innerHTML\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.innerHTML : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.innerHTML = value;\n      }\n    }\n    /** Sets or gets the language. Used in conjunction with the property messages.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locale = value;\n      }\n    }\n    /** Callback, related to localization module.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"localizeFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.localizeFormatFunction = value;\n      }\n    }\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.messages : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.messages = value;\n      }\n    }\n    /** Sets or gets the widget's name.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.name : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.name = value;\n      }\n    }\n    /** If the custom element is readonly, it cannot be interacted with.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    }\n    /** Determines the theme. Theme defines the look of the element\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.theme : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.theme = value;\n      }\n    }\n    /** If is set to true, the element cannot be focused.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"unfocusable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unfocusable = value;\n      }\n    }\n    /** Sets or gets the widget's value.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.value : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.value = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"animation\", \"checked\", \"clickMode\", \"disabled\", \"innerHTML\", \"locale\", \"localizeFormatFunction\", \"messages\", \"name\", \"readonly\", \"theme\", \"unfocusable\", \"value\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onChange\", \"onCheckValue\", \"onUncheckValue\", \"onCreate\", \"onReady\"];\n    }\n  }]);\n  return ToggleButton;\n}(React.Component);\nvar Smart$2 = window.Smart;\n/**\r\n PowerButton is On/Off rounded button.\r\n*/\nvar PowerButton = /*#__PURE__*/function (_React$Component3) {\n  _inherits(PowerButton, _React$Component3);\n  function PowerButton(props) {\n    var _this3;\n    _classCallCheck(this, PowerButton);\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(PowerButton).call(this, props));\n    _this3.componentRef = React.createRef();\n    return _this3;\n  }\n  // Gets the id of the React component.\n  _createClass(PowerButton, [{\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop3 in props) {\n        if (_prop3 === 'class' || _prop3 === 'className') {\n          var classNames = props[_prop3].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop3] !== that.nativeElement[_prop3]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop3 === 'hover' || _prop3 === 'active' || _prop3 === 'focus' || _prop3 === 'selected') {\n            that.nativeElement.setAttribute(_prop3, '');\n          }\n          var normalizedProp = normalizeProp(_prop3);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop3, props[_prop3]);\n          }\n          if (props[_prop3] !== undefined) {\n            if (typeof props[_prop3] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop3]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop3];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        Smart$2.Render();\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-power-button\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'PowerButton' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation | string\r\n    */\n  }, {\n    key: \"animation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.animation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.animation = value;\n      }\n    }\n    /** Sets or gets the check state.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.checked : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.checked = value;\n      }\n    }\n    /** Sets the click mode of the button.\r\n    *\tProperty type: ClickMode | string\r\n    */\n  }, {\n    key: \"clickMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.clickMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.clickMode = value;\n      }\n    }\n    /** Enables or disables the power button.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /** Sets or gets the language. Used in conjunction with the property messages.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locale = value;\n      }\n    }\n    /** Callback, related to localization module.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"localizeFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.localizeFormatFunction = value;\n      }\n    }\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.messages : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.messages = value;\n      }\n    }\n    /** Sets or gets the widget's name.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.name : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.name = value;\n      }\n    }\n    /** If the custom element is readonly, it cannot be interacted with.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    }\n    /** Determines the theme. Theme defines the look of the element\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.theme : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.theme = value;\n      }\n    }\n    /** If is set to true, the element cannot be focused.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"unfocusable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unfocusable = value;\n      }\n    }\n    /** Sets or gets the widget's value.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.value : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.value = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"animation\", \"checked\", \"clickMode\", \"disabled\", \"locale\", \"localizeFormatFunction\", \"messages\", \"name\", \"readonly\", \"theme\", \"unfocusable\", \"value\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onChange\", \"onCreate\", \"onReady\"];\n    }\n  }]);\n  return PowerButton;\n}(React.Component);\nvar Smart$3 = window.Smart;\n/**\r\n Buttons allow users to take actions, and make choices, with a single tap. Buttons communicate actions that users can take.\r\n*/\nvar Button = /*#__PURE__*/function (_React$Component4) {\n  _inherits(Button, _React$Component4);\n  function Button(props) {\n    var _this4;\n    _classCallCheck(this, Button);\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Button).call(this, props));\n    _this4.componentRef = React.createRef();\n    return _this4;\n  }\n  // Gets the id of the React component.\n  _createClass(Button, [{\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop4 in props) {\n        if (_prop4 === 'class' || _prop4 === 'className') {\n          var classNames = props[_prop4].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop4] !== that.nativeElement[_prop4]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop4 === 'hover' || _prop4 === 'active' || _prop4 === 'focus' || _prop4 === 'selected') {\n            that.nativeElement.setAttribute(_prop4, '');\n          }\n          var normalizedProp = normalizeProp(_prop4);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop4, props[_prop4]);\n          }\n          if (props[_prop4] !== undefined) {\n            if (typeof props[_prop4] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop4]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop4];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        Smart$3.Render();\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-button\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'Button' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation | string\r\n    */\n  }, {\n    key: \"animation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.animation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.animation = value;\n      }\n    }\n    /** Determines the click mode for the element.\r\n    *\tProperty type: ClickMode | string\r\n    */\n  }, {\n    key: \"clickMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.clickMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.clickMode = value;\n      }\n    }\n    /** Sets the content of the element.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /** Enables or disables the button.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"innerHTML\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.innerHTML : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.innerHTML = value;\n      }\n    }\n    /** Sets the inner HTML of the element.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locale = value;\n      }\n    }\n    /** Sets or gets the language. Used in conjunction with the property messages.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"localizeFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.localizeFormatFunction = value;\n      }\n    }\n    /** Callback used to customize the format of the messages that are returned from the Localization Module.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.messages : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.messages = value;\n      }\n    }\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.name : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.name = value;\n      }\n    }\n    /** Sets or gets the name attribute for the element. Name is used when submiting HTML forms.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    }\n    /** If the custom element is readonly, it cannot be interacted with.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"rightToLeft\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.rightToLeft : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.rightToLeft = value;\n      }\n    }\n    /** Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.theme : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.theme = value;\n      }\n    }\n    /** Determines the theme. Theme defines the look of the element\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.type : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.type = value;\n      }\n    }\n    /** Sets or gets the type of the button.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.value : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.value = value;\n      }\n    }\n    /** Sets or gets the button's value.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"unfocusable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unfocusable = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"animation\", \"clickMode\", \"content\", \"disabled\", \"innerHTML\", \"locale\", \"localizeFormatFunction\", \"messages\", \"name\", \"readonly\", \"rightToLeft\", \"theme\", \"type\", \"value\", \"unfocusable\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onClick\", \"onCreate\", \"onReady\"];\n    }\n  }]);\n  return Button;\n}(React.Component);\nexport default Button;\nexport { Smart$3 as Smart, Button, RepeatButton, ToggleButton, PowerButton };","map":null,"metadata":{},"sourceType":"module"}
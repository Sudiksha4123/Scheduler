{"ast":null,"code":"import _classCallCheck from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/benu/test_calendar/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nif (!window['Smart']) {\n  window['Smart'] = {\n    RenderMode: 'manual'\n  };\n} else {\n  window['Smart'].RenderMode = 'manual';\n}\nimport '../source/modules/smart.calendar';\nimport React from 'react';\nvar Smart = window.Smart;\n/**\r\n Calendar allows user to easily select one or more dates. This control supports multi-calendar view, special dates, holidays, weekends, decade views.\r\n*/\nvar Calendar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Calendar, _React$Component);\n  function Calendar(props) {\n    var _this;\n    _classCallCheck(this, Calendar);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calendar).call(this, props));\n    _this.componentRef = React.createRef();\n    return _this;\n  }\n  // Gets the id of the React component.\n  _createClass(Calendar, [{\n    key: \"clearSelection\",\n    /** Clears the selection. Removes all seleceted dates.\r\n    */\n    value: function clearSelection() {\n      var _this2 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.clearSelection();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this2.nativeElement.clearSelection();\n        });\n      }\n    }\n    /** Navigates forwards/backwards depending on the argument.\r\n    * @param {number | Date | string} step. The argument can be the following: <ul><li> number -  representing the number of months to scroll. Can be negavtive. If negative it will scroll backwards.</li><li> Date - a date object representing the Date to navigate to.</li><li> string - a string representing a valid Date, e.g. \"2020-10-1\" </li></ul>\r\n    * @returns {boolean}\r\n    */\n  }, {\n    key: \"navigate\",\n    value: function navigate(step) {\n      var result = this.nativeElement.navigate(step);\n      return result;\n    }\n    /** Selects or Unselects a date.\r\n    * @param {Date | string} date. The date to be selected or unselected. The date can be a Date object or a string in valid date format.\r\n    */\n  }, {\n    key: \"select\",\n    value: function select(date) {\n      var _this3 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.select(date);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this3.nativeElement.select(date);\n        });\n      }\n    }\n    /** Selects today's date.\r\n    * @returns {Date}\r\n    */\n  }, {\n    key: \"today\",\n    value: function today() {\n      var result = this.nativeElement.today();\n      return result;\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop in props) {\n        if (_prop === 'class' || _prop === 'className') {\n          var classNames = props[_prop].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop] !== that.nativeElement[_prop]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop === 'hover' || _prop === 'active' || _prop === 'focus' || _prop === 'selected') {\n            that.nativeElement.setAttribute(_prop, '');\n          }\n          var normalizedProp = normalizeProp(_prop);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop, props[_prop]);\n          }\n          if (props[_prop] !== undefined) {\n            if (typeof props[_prop] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        Smart.Render();\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-calendar\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'Calendar' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation | string\r\n    */\n  }, {\n    key: \"animation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.animation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.animation = value;\n      }\n    }\n    /** Applies new animation settings when it is enabled. Properties:startSpeed - Determines the initial speed of the animation.easeThreshold - Determines the point at which the animation starts to slow down - the \"ease effect\".step - Determines the step ( scrolling interval ) at which the animation will run. stepEaseSize - Coefficient that is used to calculated the new step once the threshold has been passed. resetThreshold - Determines the threshold for animation reset. When it's reached the animation will start over.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"animationSettings\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.animationSettings : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.animationSettings = value;\n      }\n    }\n    /** Determines the date controls inside the header of the Calendar.\r\n    *\tProperty type: CalendarMode | string\r\n    */\n  }, {\n    key: \"calendarMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.calendarMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.calendarMode = value;\n      }\n    }\n    /** Determines the format of the day names located above the days inside the calendar.\r\n    *\tProperty type: DayFormat | string\r\n    */\n  }, {\n    key: \"dayNameFormat\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dayNameFormat : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dayNameFormat = value;\n      }\n    }\n    /**  A callback that can be used to customize the format of the month name when calendarMode is set to 'default'.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"dateFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dateFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dateFormatFunction = value;\n      }\n    }\n    /** Enables or disables the Calendar.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /** Disables auto navigation when the user clicks on a date that's not from the current month in view.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disableAutoNavigation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disableAutoNavigation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disableAutoNavigation = value;\n      }\n    }\n    /** Determines the date view of the calendar when calendarMode is set to 'default'\r\n    *\tProperty type: CalendarDisplayMode | string\r\n    */\n  }, {\n    key: \"displayMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.displayMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.displayMode = value;\n      }\n    }\n    /** Determines the type of the month/year view when calendarMode is set to Default.\r\n    *\tProperty type: CalendarDisplayModeView | string\r\n    */\n  }, {\n    key: \"displayModeView\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.displayModeView : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.displayModeView = value;\n      }\n    }\n    /** Determines the height of the month's drop down inside the Calendar.\r\n    *\tProperty type: string | number\r\n    */\n  }, {\n    key: \"dropDownHeight\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dropDownHeight : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dropDownHeight = value;\n      }\n    }\n    /** Determines the width of the month's drop down inside the Calendar.\r\n    *\tProperty type: string | number\r\n    */\n  }, {\n    key: \"dropDownWidth\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dropDownWidth : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dropDownWidth = value;\n      }\n    }\n    /** Determines the first day of the week. From 0(Sunday) to 6(Saturday)\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"firstDayOfWeek\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.firstDayOfWeek : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.firstDayOfWeek = value;\n      }\n    }\n    /** Sets a custom footer template. Accepts the id of an HTMLTemplateElement or a reference ot it.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"footerTemplate\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.footerTemplate : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.footerTemplate = value;\n      }\n    }\n    /** Sets custom header template. Accepts the id of an HTMLTemplateElement or a reference ot it.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"headerTemplate\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.headerTemplate : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.headerTemplate = value;\n      }\n    }\n    /** Hides the names of the weekdays.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"hideDayNames\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.hideDayNames : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.hideDayNames = value;\n      }\n    }\n    /** Hides the dates from other months.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"hideOtherMonthDays\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.hideOtherMonthDays : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.hideOtherMonthDays = value;\n      }\n    }\n    /** Hides the arrow of the tooltip.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"hideTooltipArrow\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.hideTooltipArrow : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.hideTooltipArrow = value;\n      }\n    }\n    /** Sets the dates that will be displayed as important.\r\n    *\tProperty type: string[] | Date[]\r\n    */\n  }, {\n    key: \"importantDates\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.importantDates : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.importantDates = value;\n      }\n    }\n    /** Sets a template for the important dates. Accepts the id of an HTMLTemplate element inside the DOM of or a reference to it.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"importantDatesTemplate\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.importantDatesTemplate : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.importantDatesTemplate = value;\n      }\n    }\n    /**  Determines the language of the Calendar.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locale = value;\n      }\n    }\n    /** Callback used to customize the format of the messages that are returned from the Localization Module.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"localizeFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.localizeFormatFunction = value;\n      }\n    }\n    /** Determines the max date for the Calendar. Accepts date objects and valid date string formats.\r\n    *\tProperty type: string | Date\r\n    */\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.max : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.max = value;\n      }\n    }\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.messages : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.messages = value;\n      }\n    }\n    /** Determines the min date for the Calendar. Accepts date objects and valid date string formats.\r\n    *\tProperty type: string | Date\r\n    */\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.min : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.min = value;\n      }\n    }\n    /** Determines the number of months to be displayed inside the calendar. The maximum amount of months that can be shown is 12. By default only 1 month is shown.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"months\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.months : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.months = value;\n      }\n    }\n    /** Determines the format of the month names in the header when DisplayMode is set to Default or when Months property is greater than 1.\r\n    *\tProperty type: MonthFormat | string\r\n    */\n  }, {\n    key: \"monthNameFormat\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.monthNameFormat : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.monthNameFormat = value;\n      }\n    }\n    /** Sets or gets the name attribute for the element. Name is used when submiting HTML forms.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.name : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.name = value;\n      }\n    }\n    /** If the element is readonly, users cannot interact with it.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    }\n    /** Sets restricted dates. Restricted dates are dates that cannot be selected/hovered/focused. They are visualy styled as restricted. The dates can be javascript date objects or strings representing a valid date.\r\n    *\tProperty type: string[] | Date[]\r\n    */\n  }, {\n    key: \"restrictedDates\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.restrictedDates : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.restrictedDates = value;\n      }\n    }\n    /** Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"rightToLeft\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.rightToLeft : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.rightToLeft = value;\n      }\n    }\n    /**  Determines the direction of the navigation buttons located in the header and the animation.\r\n    *\tProperty type: ViewLayout | string\r\n    */\n  }, {\n    key: \"scrollButtonsNavigationMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.scrollButtonsNavigationMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.scrollButtonsNavigationMode = value;\n      }\n    }\n    /**  Determines the position of the navigation buttons located inside the header.\r\n    *\tProperty type: LayoutPosition | string\r\n    */\n  }, {\n    key: \"scrollButtonsPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.scrollButtonsPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.scrollButtonsPosition = value;\n      }\n    }\n    /** Sets the dates that will be selected. Selected dates are styled differently than the rest. The dates can be Date objects or strings in a valid date format.\r\n    *\tProperty type: string[] | Date[]\r\n    */\n  }, {\n    key: \"selectedDates\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectedDates : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectedDates = value;\n      }\n    }\n    /** Determines the date selection mode.\r\n    *\tProperty type: CalendarSelectionMode | string\r\n    */\n  }, {\n    key: \"selectionMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.selectionMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.selectionMode = value;\n      }\n    }\n    /** Sets the delay between clicks of the date navigation buttons located in the header of the Calendar.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"spinButtonsDelay\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.spinButtonsDelay : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.spinButtonsDelay = value;\n      }\n    }\n    /** Determines the initial delay before the action of the date navigation buttons located in the header of the Calendar.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"spinButtonsInitialDelay\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.spinButtonsInitialDelay : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.spinButtonsInitialDelay = value;\n      }\n    }\n    /** Determines the theme. Theme defines the look of the element\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.theme : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.theme = value;\n      }\n    }\n    /** Sets a template for the title section of the Calendar. Accepts the id of an HTMLTemplate element inside the DOM of or a reference it.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"titleTemplate\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.titleTemplate : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.titleTemplate = value;\n      }\n    }\n    /** Enables/Disabled the tooltip for the important dates. If enabled when an important date is hovered a tooltip is displayed.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"tooltip\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tooltip : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tooltip = value;\n      }\n    }\n    /** Show/Hide the arrow of the the tooltip for the important dates. By default the arrow is visible.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"tooltipArrow\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tooltipArrow : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tooltipArrow = value;\n      }\n    }\n    /** Sets the delay of the tooltip before it appears.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"tooltipDelay\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tooltipDelay : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tooltipDelay = value;\n      }\n    }\n    /** Set's a custom offset to the tooltip's position. Accepts an array of two numbers: the left coordinate and the top coordinate.\r\n    *\tProperty type: number[][]\r\n    */\n  }, {\n    key: \"tooltipOffset\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tooltipOffset : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tooltipOffset = value;\n      }\n    }\n    /** Sets the position of the tooltip.\r\n    *\tProperty type: TooltipPosition | string\r\n    */\n  }, {\n    key: \"tooltipPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tooltipPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tooltipPosition = value;\n      }\n    }\n    /** Sets a template for the tooltip's content. Accepts the id of an HTMLTEmplate element inside the DOM or it's reference.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"tooltipTemplate\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tooltipTemplate : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tooltipTemplate = value;\n      }\n    }\n    /** If is set to true, the element cannot be focused.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"unfocusable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unfocusable = value;\n      }\n    }\n    /** Determines the orientation of the Calendar.\r\n    *\tProperty type: ViewLayout | string\r\n    */\n  }, {\n    key: \"view\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.view : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.view = value;\n      }\n    }\n    /** Determines the visible sections of the Calendar. The view sections are : title, header, footer. Multiple sections can be applied at the same time. By default only the 'header' section is visible.\r\n    *\tProperty type: string[]\r\n    */\n  }, {\n    key: \"viewSections\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.viewSections : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.viewSections = value;\n      }\n    }\n    /** Enables/Disabled week numbering. If enabled week numbers are displayed infront of each week inside the Calendar.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"weekNumbers\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.weekNumbers : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.weekNumbers = value;\n      }\n    }\n    /** Determines the number of visible weeks. The value of the property ranges from 1 to 6. Where 1 is one week and 6 is a full month ( 6 weeks ).\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"weeks\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.weeks : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.weeks = value;\n      }\n    }\n    /** Determines the year format in the header when DisplayMode is set to Default or when Months property is greater than 1.\r\n    *\tProperty type: YearFormat | string\r\n    */\n  }, {\n    key: \"yearFormat\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.yearFormat : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.yearFormat = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"animation\", \"animationSettings\", \"calendarMode\", \"dayNameFormat\", \"dateFormatFunction\", \"disabled\", \"disableAutoNavigation\", \"displayMode\", \"displayModeView\", \"dropDownHeight\", \"dropDownWidth\", \"firstDayOfWeek\", \"footerTemplate\", \"headerTemplate\", \"hideDayNames\", \"hideOtherMonthDays\", \"hideTooltipArrow\", \"importantDates\", \"importantDatesTemplate\", \"locale\", \"localizeFormatFunction\", \"max\", \"messages\", \"min\", \"months\", \"monthNameFormat\", \"name\", \"readonly\", \"restrictedDates\", \"rightToLeft\", \"scrollButtonsNavigationMode\", \"scrollButtonsPosition\", \"selectedDates\", \"selectionMode\", \"spinButtonsDelay\", \"spinButtonsInitialDelay\", \"theme\", \"titleTemplate\", \"tooltip\", \"tooltipArrow\", \"tooltipDelay\", \"tooltipOffset\", \"tooltipPosition\", \"tooltipTemplate\", \"unfocusable\", \"view\", \"viewSections\", \"weekNumbers\", \"weeks\", \"yearFormat\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onChange\", \"onDisplayModeChanging\", \"onDisplayModeChange\", \"onNavigationChanging\", \"onNavigationChange\", \"onOpen\", \"onClose\", \"onCreate\", \"onReady\"];\n    }\n  }]);\n  return Calendar;\n}(React.Component);\nexport default Calendar;\nexport { Smart, Calendar };","map":null,"metadata":{},"sourceType":"module"}